{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getLocalData } from \"../localStorage/storageHelpers\";\nimport { StorageKeys } from \"../localStorage/storageKeys\";\nimport { logIn } from \"../store/appSlice\";\nimport { store } from \"../store/store\";\nimport LoginScreenStack from \"./loginStack\";\nimport MainStack from \"./mainStack\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Navigation() {\n  return _jsx(NavigationContainer, {\n    children: _jsx(RootNavigator, {})\n  });\n}\n\nvar checkLocalStorageForUserData = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var userData = yield getLocalData(StorageKeys.USER_DATA, true);\n\n    if (userData) {\n      store.dispatch(logIn(JSON.parse(userData)));\n    }\n  });\n\n  return function checkLocalStorageForUserData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar RootStack = createNativeStackNavigator();\n\nfunction RootNavigator() {\n  useEffect(function () {\n    checkLocalStorageForUserData();\n  }, []);\n  var userData = useSelector(function (state) {\n    return state.app.userData;\n  });\n  console.log(\"userData\", userData);\n  return _jsx(RootStack.Navigator, {\n    initialRouteName: \"LoginStack\",\n    children: !(userData != null && userData.token) ? _jsx(RootStack.Screen, {\n      name: \"LoginStack\",\n      component: LoginScreenStack,\n      options: {\n        headerShown: false\n      }\n    }) : _jsx(RootStack.Screen, {\n      name: \"MainTabNavigator\",\n      component: MainStack,\n      options: {\n        headerShown: false\n      }\n    })\n  });\n}","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","React","useEffect","useSelector","getLocalData","StorageKeys","logIn","store","LoginScreenStack","MainStack","Navigation","checkLocalStorageForUserData","userData","USER_DATA","dispatch","JSON","parse","RootStack","RootNavigator","state","app","console","log","token","headerShown"],"sources":["D:/DEV/react-native/BeeFriends-FE/src/navigation/index.tsx"],"sourcesContent":["import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getLocalData } from \"../localStorage/storageHelpers\";\nimport { StorageKeys } from \"../localStorage/storageKeys\";\nimport { logIn } from \"../store/appSlice\";\nimport { RootState, store } from \"../store/store\";\n\nimport { RootStackParamList } from \"../types\";\nimport LoginScreenStack from \"./loginStack\";\nimport MainStack from \"./mainStack\";\n\nexport default function Navigation() {\n    return (\n        <NavigationContainer>\n            <RootNavigator />\n        </NavigationContainer>\n    );\n}\n\nconst checkLocalStorageForUserData = async () => {\n    const userData = await getLocalData(StorageKeys.USER_DATA, true);\n    if (userData) {\n        store.dispatch(logIn(JSON.parse(userData)));\n    }\n};\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n    useEffect(() => {\n        checkLocalStorageForUserData();\n    }, []);\n\n    const userData = useSelector((state: RootState) => state.app.userData);\n\n    console.log(\"userData\", userData);\n\n    return (\n        <RootStack.Navigator initialRouteName=\"LoginStack\">\n            {!userData?.token ? (\n                <RootStack.Screen\n                    name=\"LoginStack\"\n                    component={LoginScreenStack}\n                    options={{ headerShown: false }}\n                />\n            ) : (\n                <RootStack.Screen\n                    name=\"MainTabNavigator\"\n                    component={MainStack}\n                    options={{ headerShown: false }}\n                />\n            )}\n        </RootStack.Navigator>\n    );\n}\n"],"mappings":";AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT;AACA,SAASC,WAAT;AACA,SAASC,KAAT;AACA,SAAoBC,KAApB;AAGA,OAAOC,gBAAP;AACA,OAAOC,SAAP;;AAEA,eAAe,SAASC,UAAT,GAAsB;EACjC,OACI,KAAC,mBAAD;IAAA,UACI,KAAC,aAAD;EADJ,EADJ;AAKH;;AAED,IAAMC,4BAA4B;EAAA,6BAAG,aAAY;IAC7C,IAAMC,QAAQ,SAASR,YAAY,CAACC,WAAW,CAACQ,SAAb,EAAwB,IAAxB,CAAnC;;IACA,IAAID,QAAJ,EAAc;MACVL,KAAK,CAACO,QAAN,CAAeR,KAAK,CAACS,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAD,CAApB;IACH;EACJ,CALiC;;EAAA,gBAA5BD,4BAA4B;IAAA;EAAA;AAAA,GAAlC;;AAOA,IAAMM,SAAS,GAAGjB,0BAA0B,EAA5C;;AAEA,SAASkB,aAAT,GAAyB;EACrBhB,SAAS,CAAC,YAAM;IACZS,4BAA4B;EAC/B,CAFQ,EAEN,EAFM,CAAT;EAIA,IAAMC,QAAQ,GAAGT,WAAW,CAAC,UAACgB,KAAD;IAAA,OAAsBA,KAAK,CAACC,GAAN,CAAUR,QAAhC;EAAA,CAAD,CAA5B;EAEAS,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBV,QAAxB;EAEA,OACI,KAAC,SAAD,CAAW,SAAX;IAAqB,gBAAgB,EAAC,YAAtC;IAAA,UACK,EAACA,QAAD,YAACA,QAAQ,CAAEW,KAAX,IACG,KAAC,SAAD,CAAW,MAAX;MACI,IAAI,EAAC,YADT;MAEI,SAAS,EAAEf,gBAFf;MAGI,OAAO,EAAE;QAAEgB,WAAW,EAAE;MAAf;IAHb,EADH,GAOG,KAAC,SAAD,CAAW,MAAX;MACI,IAAI,EAAC,kBADT;MAEI,SAAS,EAAEf,SAFf;MAGI,OAAO,EAAE;QAAEe,WAAW,EAAE;MAAf;IAHb;EARR,EADJ;AAiBH"},"metadata":{},"sourceType":"module"}