{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoSecureStore from \"./ExpoSecureStore\";\nexport var AFTER_FIRST_UNLOCK = ExpoSecureStore.AFTER_FIRST_UNLOCK;\nexport var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport var ALWAYS = ExpoSecureStore.ALWAYS;\nexport var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport var ALWAYS_THIS_DEVICE_ONLY = ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport var WHEN_UNLOCKED = ExpoSecureStore.WHEN_UNLOCKED;\nexport var WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\nvar VALUE_BYTES_LIMIT = 2048;\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoSecureStore.getValueWithKeyAsync;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nexport function deleteItemAsync(_x) {\n  return _deleteItemAsync.apply(this, arguments);\n}\n\nfunction _deleteItemAsync() {\n  _deleteItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _ensureValidKey(key);\n\n    if (!ExpoSecureStore.deleteValueWithKeyAsync) {\n      throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n    }\n\n    yield ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n  });\n  return _deleteItemAsync.apply(this, arguments);\n}\n\nexport function getItemAsync(_x2) {\n  return _getItemAsync.apply(this, arguments);\n}\n\nfunction _getItemAsync() {\n  _getItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _ensureValidKey(key);\n\n    return yield ExpoSecureStore.getValueWithKeyAsync(key, options);\n  });\n  return _getItemAsync.apply(this, arguments);\n}\n\nexport function setItemAsync(_x3, _x4) {\n  return _setItemAsync.apply(this, arguments);\n}\n\nfunction _setItemAsync() {\n  _setItemAsync = _asyncToGenerator(function* (key, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _ensureValidKey(key);\n\n    if (!_isValidValue(value)) {\n      throw new Error(\"Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.\");\n    }\n\n    if (!ExpoSecureStore.setValueWithKeyAsync) {\n      throw new UnavailabilityError('SecureStore', 'setItemAsync');\n    }\n\n    yield ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n  });\n  return _setItemAsync.apply(this, arguments);\n}\n\nfunction _ensureValidKey(key) {\n  if (!_isValidKey(key)) {\n    throw new Error(\"Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \\\".\\\", \\\"-\\\", and \\\"_\\\".\");\n  }\n}\n\nfunction _isValidKey(key) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn('Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.');\n  }\n\n  return true;\n}\n\nfunction _byteCount(value) {\n  var bytes = 0;\n\n  for (var i = 0; i < value.length; i++) {\n    var codePoint = value.charCodeAt(i);\n\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        var next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}","map":{"version":3,"mappings":";AAAA,SAASA,mBAAT,QAAoC,mBAApC;AAEA,OAAOC,eAAP;AAUA,OAAO,IAAMC,kBAAkB,GAAkCD,eAAe,CAACC,kBAA1E;AAOP,OAAO,IAAMC,mCAAmC,GAC9CF,eAAe,CAACE,mCADX;AAQP,OAAO,IAAMC,MAAM,GAAkCH,eAAe,CAACG,MAA9D;AAOP,OAAO,IAAMC,kCAAkC,GAC7CJ,eAAe,CAACI,kCADX;AAOP,OAAO,IAAMC,uBAAuB,GAClCL,eAAe,CAACK,uBADX;AAOP,OAAO,IAAMC,aAAa,GAAkCN,eAAe,CAACM,aAArE;AAOP,OAAO,IAAMC,8BAA8B,GACzCP,eAAe,CAACO,8BADX;AAGP,IAAMC,iBAAiB,GAAG,IAA1B;AAwCA,gBAAsBC,gBAAtB;EAAA;AAAA;;;wCAAO,aAA+B;IACpC,OAAO,CAAC,CAACT,eAAe,CAACU,oBAAzB;EACD,C;;;;AAWD,gBAAsBC,eAAtB;EAAA;AAAA;;;uCAAO,WACLC,GADK,EAE2B;IAAA,IAAhCC,OAAgC,uEAAF,EAAE;;IAEhCC,eAAe,CAACF,GAAD,CAAf;;IAEA,IAAI,CAACZ,eAAe,CAACe,uBAArB,EAA8C;MAC5C,MAAM,IAAIhB,mBAAJ,CAAwB,aAAxB,EAAuC,iBAAvC,CAAN;IACD;;IACD,MAAMC,eAAe,CAACe,uBAAhB,CAAwCH,GAAxC,EAA6CC,OAA7C,CAAN;EACD,C;;;;AAYD,gBAAsBG,YAAtB;EAAA;AAAA;;;oCAAO,WACLJ,GADK,EAE2B;IAAA,IAAhCC,OAAgC,uEAAF,EAAE;;IAEhCC,eAAe,CAACF,GAAD,CAAf;;IACA,aAAaZ,eAAe,CAACU,oBAAhB,CAAqCE,GAArC,EAA0CC,OAA1C,CAAb;EACD,C;;;;AAaD,gBAAsBI,YAAtB;EAAA;AAAA;;;oCAAO,WACLL,GADK,EAELM,KAFK,EAG2B;IAAA,IAAhCL,OAAgC,uEAAF,EAAE;;IAEhCC,eAAe,CAACF,GAAD,CAAf;;IACA,IAAI,CAACO,aAAa,CAACD,KAAD,CAAlB,EAA2B;MACzB,MAAM,IAAIE,KAAJ,+HAAN;IAGD;;IACD,IAAI,CAACpB,eAAe,CAACqB,oBAArB,EAA2C;MACzC,MAAM,IAAItB,mBAAJ,CAAwB,aAAxB,EAAuC,cAAvC,CAAN;IACD;;IACD,MAAMC,eAAe,CAACqB,oBAAhB,CAAqCH,KAArC,EAA4CN,GAA5C,EAAiDC,OAAjD,CAAN;EACD,C;;;;AAED,SAASC,eAAT,CAAyBF,GAAzB,EAAoC;EAClC,IAAI,CAACU,WAAW,CAACV,GAAD,CAAhB,EAAuB;IACrB,MAAM,IAAIQ,KAAJ,kIAAN;EAGD;AACF;;AAED,SAASE,WAAT,CAAqBV,GAArB,EAAgC;EAC9B,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA2B,YAAYW,IAAZ,CAAiBX,GAAjB,CAAlC;AACD;;AAED,SAASO,aAAT,CAAuBD,KAAvB,EAAoC;EAClC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,KAAP;EACD;;EACD,IAAIM,UAAU,CAACN,KAAD,CAAV,GAAoBV,iBAAxB,EAA2C;IACzCiB,OAAO,CAACC,IAAR,CACE,0HADF;EAGD;;EACD,OAAO,IAAP;AACD;;AAGD,SAASF,UAAT,CAAoBN,KAApB,EAAiC;EAC/B,IAAIS,KAAK,GAAG,CAAZ;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACW,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAME,SAAS,GAAGZ,KAAK,CAACa,UAAN,CAAiBH,CAAjB,CAAlB;;IAGA,IAAIE,SAAS,IAAI,MAAb,IAAuBA,SAAS,GAAG,MAAvC,EAA+C;MAC7C,IAAIA,SAAS,GAAG,MAAZ,IAAsBF,CAAC,GAAG,CAAJ,GAAQV,KAAK,CAACW,MAAxC,EAAgD;QAC9C,IAAMG,IAAI,GAAGd,KAAK,CAACa,UAAN,CAAiBH,CAAC,GAAG,CAArB,CAAb;;QAEA,IAAII,IAAI,IAAI,MAAR,IAAkBA,IAAI,GAAG,MAA7B,EAAqC;UACnCL,KAAK,IAAI,CAAT;UACAC,CAAC;UACD;QACD;MACF;IACF;;IAEDD,KAAK,IAAIG,SAAS,GAAG,IAAZ,GAAmB,CAAnB,GAAuBA,SAAS,GAAG,KAAZ,GAAoB,CAApB,GAAwB,CAAxD;EACD;;EAED,OAAOH,KAAP;AACD","names":["UnavailabilityError","ExpoSecureStore","AFTER_FIRST_UNLOCK","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","ALWAYS_THIS_DEVICE_ONLY","WHEN_UNLOCKED","WHEN_UNLOCKED_THIS_DEVICE_ONLY","VALUE_BYTES_LIMIT","isAvailableAsync","getValueWithKeyAsync","deleteItemAsync","key","options","_ensureValidKey","deleteValueWithKeyAsync","getItemAsync","setItemAsync","value","_isValidValue","Error","setValueWithKeyAsync","_isValidKey","test","_byteCount","console","warn","bytes","i","length","codePoint","charCodeAt","next"],"sourceRoot":"","sources":["../src/SecureStore.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoSecureStore from './ExpoSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\n// @needsAudit\n/**\n * The data in the keychain item cannot be accessed after a restart until the device has been\n * unlocked once by the user. This may be useful if you need to access the item when the phone\n * is locked.\n */\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant = ExpoSecureStore.AFTER_FIRST_UNLOCK;\n\n// @needsAudit\n/**\n * Similar to `AFTER_FIRST_UNLOCK`, except the entry is not migrated to a new device when restoring\n * from a backup.\n */\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can always be accessed regardless of whether the device is locked.\n * This is the least secure option.\n */\nexport const ALWAYS: KeychainAccessibilityConstant = ExpoSecureStore.ALWAYS;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED_THIS_DEVICE_ONLY`, except the user must have set a passcode in order to\n * store an entry. If the user removes their passcode, the entry will be deleted.\n */\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * Similar to `ALWAYS`, except the entry is not migrated to a new device when restoring from a backup.\n */\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can be accessed only while the device is unlocked by the user.\n */\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExpoSecureStore.WHEN_UNLOCKED;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED`, except the entry is not migrated to a new device when restoring from\n * a backup.\n */\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nconst VALUE_BYTES_LIMIT = 2048;\n\n// @needsAudit\nexport type SecureStoreOptions = {\n  /**\n   * - iOS: The item's service, equivalent to `kSecAttrService`\n   * - Android: Equivalent of the public/private key pair `Alias`\n   * > If the item is set with the `keychainService` option, it will be required to later fetch the value.\n   */\n  keychainService?: string;\n  /**\n   * Option responsible for enabling the usage of the user authentication methods available on the device while\n   * accessing data stored in SecureStore.\n   * - iOS: Equivalent to `kSecAccessControlUserPresence`\n   * - Android: Equivalent to `setUserAuthenticationRequired(true)` (requires API 23).\n   * Complete functionality is unlocked only with a freshly generated key - this would not work in tandem with the `keychainService`\n   * value used for the others non-authenticated operations.\n   */\n  requireAuthentication?: boolean;\n  /**\n   * Custom message displayed to the user while `requireAuthentication` option is turned on.\n   */\n  authenticationPrompt?: string;\n  /**\n   * Specifies when the stored entry is accessible, using iOS's `kSecAttrAccessible` property.\n   * @see Apple's documentation on [keychain item accessibility](https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/02concepts/concepts.html#//apple_ref/doc/uid/TP30000897-CH204-SW18).\n   * @default SecureStore.WHEN_UNLOCKED\n   * @platform ios\n   */\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\n// @needsAudit\n/**\n * Returns whether the SecureStore API is enabled on the current device. This does not check the app\n * permissions.\n *\n * @return Promise which fulfils witch `boolean`, indicating whether the SecureStore API is available\n * on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoSecureStore.getValueWithKeyAsync;\n}\n\n// @needsAudit\n/**\n * Delete the value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if the value couldn't be deleted.\n */\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n\n  if (!ExpoSecureStore.deleteValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n  }\n  await ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Fetch the stored value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that resolves to the previously stored value, or `null` if there is no entry\n * for the given key. The promise will reject if an error occurred while retrieving the value.\n */\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExpoSecureStore.getValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Store a key–value pair.\n *\n * @param key The key to associate with the stored value. Keys may contain alphanumeric characters\n * `.`, `-`, and `_`.\n * @param value The value to store. Size limit is 2048 bytes.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if value cannot be stored on the device.\n */\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  if (!ExpoSecureStore.setValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'setItemAsync');\n  }\n  await ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  if (!_isValidKey(key)) {\n    throw new Error(\n      `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n    );\n  }\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn(\n      'Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.'\n    );\n  }\n  return true;\n}\n\n// copy-pasted from https://stackoverflow.com/a/39488643\nfunction _byteCount(value: string) {\n  let bytes = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    const codePoint = value.charCodeAt(i);\n\n    // Lone surrogates cannot be passed to encodeURI\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        const next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}\n"]},"metadata":{},"sourceType":"module"}